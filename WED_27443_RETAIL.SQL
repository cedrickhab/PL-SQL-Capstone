-- ================================
-- ✅ PL/SQL Capstone Project: Phase V to VII SQL Scripts
-- ================================

-- ==========
-- DDL: TABLE CREATION
-- ==========

-- Suppliers Table
CREATE TABLE Suppliers (
    Supplier_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Supplier_Name   VARCHAR2(100) NOT NULL,
    Contact_Email   VARCHAR2(100) UNIQUE NOT NULL,
    Phone           VARCHAR2(20),
    Created_At      DATE DEFAULT SYSDATE
);

-- Products Table
CREATE TABLE Products (
    Product_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Product_Name    VARCHAR2(100) NOT NULL,
    Price           NUMBER(10,2) NOT NULL CHECK (Price > 0),
    Quantity        NUMBER DEFAULT 0 CHECK (Quantity >= 0),
    Supplier_ID     NUMBER,
    Created_At      DATE DEFAULT SYSDATE,
    CONSTRAINT fk_product_supplier FOREIGN KEY (Supplier_ID)
        REFERENCES Suppliers(Supplier_ID) ON DELETE SET NULL
);

-- Sales Table
CREATE TABLE Sales (
    Sale_ID         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Product_ID      NUMBER NOT NULL,
    Quantity_Sold   NUMBER NOT NULL CHECK (Quantity_Sold > 0),
    Sale_Date       DATE DEFAULT SYSDATE,
    CONSTRAINT fk_sale_product FOREIGN KEY (Product_ID)
        REFERENCES Products(Product_ID)
);

-- Supplier_Product Junction Table
CREATE TABLE Supplier_Product (
    Supplier_ID   NUMBER,
    Product_ID    NUMBER,
    Supply_Date   DATE DEFAULT SYSDATE,
    PRIMARY KEY (Supplier_ID, Product_ID),
    FOREIGN KEY (Supplier_ID) REFERENCES Suppliers(Supplier_ID),
    FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID)
);

-- Holiday Calendar Table
CREATE TABLE holiday_calendar (
    holiday_date DATE PRIMARY KEY,
    description  VARCHAR2(100)
);

-- Audit Log Table
CREATE TABLE audit_log (
    audit_id     NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id      VARCHAR2(30),
    action_date  DATE DEFAULT SYSDATE,
    table_name   VARCHAR2(50),
    operation    VARCHAR2(20),
    status       VARCHAR2(20),
    remarks      VARCHAR2(100)
);


-- =============
-- DDL: ALTER STATEMENTS (Example)
-- =============
-- Add a new column to track last modified time
ALTER TABLE Products ADD Last_Updated DATE DEFAULT SYSDATE;

-- =============
-- DML: DATA INSERTION
-- =============

-- Insert Suppliers
INSERT INTO Suppliers (Supplier_Name, Contact_Email, Phone)
VALUES ('Prime Distributors', 'prime@supply.com', '0781234567');
INSERT INTO Suppliers (Supplier_Name, Contact_Email, Phone)
VALUES ('Fresh Farm Co.', 'freshfarm@supply.com', '0787654321');

-- Insert Products
INSERT INTO Products (Product_Name, Price, Quantity, Supplier_ID)
VALUES ('Rice 5kg', 20.00, 50, 1);
INSERT INTO Products (Product_Name, Price, Quantity, Supplier_ID)
VALUES ('Cooking Oil 1L', 8.50, 100, 1);
INSERT INTO Products (Product_Name, Price, Quantity, Supplier_ID)
VALUES ('Sugar 1kg', 4.25, 200, 2);

-- Insert Sales
INSERT INTO Sales (Product_ID, Quantity_Sold)
VALUES (1, 2);
INSERT INTO Sales (Product_ID, Quantity_Sold)
VALUES (2, 1);

-- Insert Supplier_Product
INSERT INTO Supplier_Product (Supplier_ID, Product_ID)
VALUES (1, 1);
INSERT INTO Supplier_Product (Supplier_ID, Product_ID)
VALUES (1, 2);
INSERT INTO Supplier_Product (Supplier_ID, Product_ID)
VALUES (2, 3);

-- Insert Holidays
INSERT INTO holiday_calendar VALUES (TO_DATE('2025-06-01', 'YYYY-MM-DD'), 'National Day');
INSERT INTO holiday_calendar VALUES (TO_DATE('2025-06-15', 'YYYY-MM-DD'), 'Founders Day');


-- =============
-- DML: UPDATE & DELETE TESTS (For Trigger)
-- =============
-- ❌ Attempt Update (Blocked if weekday/holiday)
UPDATE Products SET Quantity = Quantity + 5 WHERE Product_ID = 1;

-- ❌ Attempt Delete (Blocked if weekday/holiday)
DELETE FROM Products WHERE Product_ID = 2;


-- =============
-- PACKAGE: AUDIT_PKG
-- =============

CREATE OR REPLACE PACKAGE audit_pkg IS
  PROCEDURE log_action(
    p_table VARCHAR2,
    p_operation VARCHAR2,
    p_status VARCHAR2,
    p_remarks VARCHAR2
  );
END audit_pkg;
/

CREATE OR REPLACE PACKAGE BODY audit_pkg IS
  PROCEDURE log_action(
    p_table VARCHAR2,
    p_operation VARCHAR2,
    p_status VARCHAR2,
    p_remarks VARCHAR2
  ) IS
  BEGIN
    INSERT INTO audit_log (user_id, table_name, operation, status, remarks)
    VALUES (USER, p_table, p_operation, p_status, p_remarks);
  END;
END audit_pkg;
/


-- =============
-- TRIGGER: AUDIT + RESTRICTION
-- =============

CREATE OR REPLACE TRIGGER trg_audit_products
BEFORE INSERT OR UPDATE OR DELETE ON Products
FOR EACH ROW
DECLARE
    v_day        VARCHAR2(10);
    v_is_holiday NUMBER;
    v_status     VARCHAR2(20);
BEGIN
    SELECT TO_CHAR(SYSDATE, 'DY') INTO v_day FROM dual;
    SELECT COUNT(*) INTO v_is_holiday
    FROM holiday_calendar
    WHERE holiday_date = TRUNC(SYSDATE);

    IF v_day IN ('MON','TUE','WED','THU','FRI') OR v_is_holiday > 0 THEN
        v_status := 'DENIED';
        audit_pkg.log_action('PRODUCTS', 'BLOCKED DML', v_status, 'Blocked by weekday/holiday trigger');
        RAISE_APPLICATION_ERROR(-20002, '🚫 Action denied by policy.');
    ELSE
        v_status := 'ALLOWED';
        audit_pkg.log_action('PRODUCTS', 'DML', v_status, 'Weekend or non-holiday operation.');
    END IF;
END;
/


-- =============
-- PROCEDURE (SAMPLE DATA RETRIEVAL)
-- =============

CREATE OR REPLACE PROCEDURE get_all_products IS
  CURSOR prod_cursor IS
    SELECT Product_ID, Product_Name, Quantity FROM Products;
  prod_row prod_cursor%ROWTYPE;
BEGIN
  OPEN prod_cursor;
  LOOP
    FETCH prod_cursor INTO prod_row;
    EXIT WHEN prod_cursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Product: ' || prod_row.Product_Name || ', Qty: ' || prod_row.Quantity);
  END LOOP;
  CLOSE prod_cursor;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


-- =============
-- WINDOW FUNCTION (SALES ANALYTICS)
-- =============

SELECT 
  Product_ID,
  SUM(Quantity_Sold) OVER (PARTITION BY Product_ID) AS Total_Sold
FROM Sales;
